// Generated by gencpp from file signal_chassis/Drivetrain.msg
// DO NOT EDIT!


#ifndef SIGNAL_CHASSIS_MESSAGE_DRIVETRAIN_H
#define SIGNAL_CHASSIS_MESSAGE_DRIVETRAIN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace signal_chassis
{
template <class ContainerAllocator>
struct Drivetrain_
{
  typedef Drivetrain_<ContainerAllocator> Type;

  Drivetrain_()
    : steer_angle_fl(0.0)
    , steer_angle_fr(0.0)
    , steer_angle_rl(0.0)
    , steer_angle_rr(0.0)
    , drive_speed_fl(0.0)
    , drive_speed_fr(0.0)
    , drive_speed_rl(0.0)
    , drive_speed_rr(0.0)
    , drive_angular_speed_fl(0.0)
    , drive_angular_speed_fr(0.0)
    , drive_angular_speed_rl(0.0)
    , drive_angular_speed_rr(0.0)
    , motion_mode(0)  {
    }
  Drivetrain_(const ContainerAllocator& _alloc)
    : steer_angle_fl(0.0)
    , steer_angle_fr(0.0)
    , steer_angle_rl(0.0)
    , steer_angle_rr(0.0)
    , drive_speed_fl(0.0)
    , drive_speed_fr(0.0)
    , drive_speed_rl(0.0)
    , drive_speed_rr(0.0)
    , drive_angular_speed_fl(0.0)
    , drive_angular_speed_fr(0.0)
    , drive_angular_speed_rl(0.0)
    , drive_angular_speed_rr(0.0)
    , motion_mode(0)  {
  (void)_alloc;
    }



   typedef float _steer_angle_fl_type;
  _steer_angle_fl_type steer_angle_fl;

   typedef float _steer_angle_fr_type;
  _steer_angle_fr_type steer_angle_fr;

   typedef float _steer_angle_rl_type;
  _steer_angle_rl_type steer_angle_rl;

   typedef float _steer_angle_rr_type;
  _steer_angle_rr_type steer_angle_rr;

   typedef float _drive_speed_fl_type;
  _drive_speed_fl_type drive_speed_fl;

   typedef float _drive_speed_fr_type;
  _drive_speed_fr_type drive_speed_fr;

   typedef float _drive_speed_rl_type;
  _drive_speed_rl_type drive_speed_rl;

   typedef float _drive_speed_rr_type;
  _drive_speed_rr_type drive_speed_rr;

   typedef float _drive_angular_speed_fl_type;
  _drive_angular_speed_fl_type drive_angular_speed_fl;

   typedef float _drive_angular_speed_fr_type;
  _drive_angular_speed_fr_type drive_angular_speed_fr;

   typedef float _drive_angular_speed_rl_type;
  _drive_angular_speed_rl_type drive_angular_speed_rl;

   typedef float _drive_angular_speed_rr_type;
  _drive_angular_speed_rr_type drive_angular_speed_rr;

   typedef int32_t _motion_mode_type;
  _motion_mode_type motion_mode;





  typedef boost::shared_ptr< ::signal_chassis::Drivetrain_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::signal_chassis::Drivetrain_<ContainerAllocator> const> ConstPtr;

}; // struct Drivetrain_

typedef ::signal_chassis::Drivetrain_<std::allocator<void> > Drivetrain;

typedef boost::shared_ptr< ::signal_chassis::Drivetrain > DrivetrainPtr;
typedef boost::shared_ptr< ::signal_chassis::Drivetrain const> DrivetrainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::signal_chassis::Drivetrain_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::signal_chassis::Drivetrain_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::signal_chassis::Drivetrain_<ContainerAllocator1> & lhs, const ::signal_chassis::Drivetrain_<ContainerAllocator2> & rhs)
{
  return lhs.steer_angle_fl == rhs.steer_angle_fl &&
    lhs.steer_angle_fr == rhs.steer_angle_fr &&
    lhs.steer_angle_rl == rhs.steer_angle_rl &&
    lhs.steer_angle_rr == rhs.steer_angle_rr &&
    lhs.drive_speed_fl == rhs.drive_speed_fl &&
    lhs.drive_speed_fr == rhs.drive_speed_fr &&
    lhs.drive_speed_rl == rhs.drive_speed_rl &&
    lhs.drive_speed_rr == rhs.drive_speed_rr &&
    lhs.drive_angular_speed_fl == rhs.drive_angular_speed_fl &&
    lhs.drive_angular_speed_fr == rhs.drive_angular_speed_fr &&
    lhs.drive_angular_speed_rl == rhs.drive_angular_speed_rl &&
    lhs.drive_angular_speed_rr == rhs.drive_angular_speed_rr &&
    lhs.motion_mode == rhs.motion_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::signal_chassis::Drivetrain_<ContainerAllocator1> & lhs, const ::signal_chassis::Drivetrain_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace signal_chassis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::signal_chassis::Drivetrain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::signal_chassis::Drivetrain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_chassis::Drivetrain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_chassis::Drivetrain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_chassis::Drivetrain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_chassis::Drivetrain_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::signal_chassis::Drivetrain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46db51bd1f2094081def30cd2e74f33b";
  }

  static const char* value(const ::signal_chassis::Drivetrain_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46db51bd1f209408ULL;
  static const uint64_t static_value2 = 0x1def30cd2e74f33bULL;
};

template<class ContainerAllocator>
struct DataType< ::signal_chassis::Drivetrain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "signal_chassis/Drivetrain";
  }

  static const char* value(const ::signal_chassis::Drivetrain_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::signal_chassis::Drivetrain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steer_angle_fl\n"
"float32 steer_angle_fr\n"
"float32 steer_angle_rl\n"
"float32 steer_angle_rr\n"
"float32 drive_speed_fl\n"
"float32 drive_speed_fr\n"
"float32 drive_speed_rl\n"
"float32 drive_speed_rr\n"
"float32 drive_angular_speed_fl\n"
"float32 drive_angular_speed_fr\n"
"float32 drive_angular_speed_rl\n"
"float32 drive_angular_speed_rr\n"
"int32 motion_mode\n"
;
  }

  static const char* value(const ::signal_chassis::Drivetrain_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::signal_chassis::Drivetrain_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steer_angle_fl);
      stream.next(m.steer_angle_fr);
      stream.next(m.steer_angle_rl);
      stream.next(m.steer_angle_rr);
      stream.next(m.drive_speed_fl);
      stream.next(m.drive_speed_fr);
      stream.next(m.drive_speed_rl);
      stream.next(m.drive_speed_rr);
      stream.next(m.drive_angular_speed_fl);
      stream.next(m.drive_angular_speed_fr);
      stream.next(m.drive_angular_speed_rl);
      stream.next(m.drive_angular_speed_rr);
      stream.next(m.motion_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Drivetrain_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::signal_chassis::Drivetrain_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::signal_chassis::Drivetrain_<ContainerAllocator>& v)
  {
    s << indent << "steer_angle_fl: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_fl);
    s << indent << "steer_angle_fr: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_fr);
    s << indent << "steer_angle_rl: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_rl);
    s << indent << "steer_angle_rr: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_rr);
    s << indent << "drive_speed_fl: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed_fl);
    s << indent << "drive_speed_fr: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed_fr);
    s << indent << "drive_speed_rl: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed_rl);
    s << indent << "drive_speed_rr: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed_rr);
    s << indent << "drive_angular_speed_fl: ";
    Printer<float>::stream(s, indent + "  ", v.drive_angular_speed_fl);
    s << indent << "drive_angular_speed_fr: ";
    Printer<float>::stream(s, indent + "  ", v.drive_angular_speed_fr);
    s << indent << "drive_angular_speed_rl: ";
    Printer<float>::stream(s, indent + "  ", v.drive_angular_speed_rl);
    s << indent << "drive_angular_speed_rr: ";
    Printer<float>::stream(s, indent + "  ", v.drive_angular_speed_rr);
    s << indent << "motion_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motion_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIGNAL_CHASSIS_MESSAGE_DRIVETRAIN_H

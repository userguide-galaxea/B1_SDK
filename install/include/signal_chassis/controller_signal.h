// Generated by gencpp from file signal_chassis/controller_signal.msg
// DO NOT EDIT!


#ifndef SIGNAL_CHASSIS_MESSAGE_CONTROLLER_SIGNAL_H
#define SIGNAL_CHASSIS_MESSAGE_CONTROLLER_SIGNAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace signal_chassis
{
template <class ContainerAllocator>
struct controller_signal_
{
  typedef controller_signal_<ContainerAllocator> Type;

  controller_signal_()
    : left_x_axis(0.0)
    , left_y_axis(0.0)
    , right_x_axis(0.0)
    , right_y_axis(0.0)  {
    }
  controller_signal_(const ContainerAllocator& _alloc)
    : left_x_axis(0.0)
    , left_y_axis(0.0)
    , right_x_axis(0.0)
    , right_y_axis(0.0)  {
  (void)_alloc;
    }



   typedef float _left_x_axis_type;
  _left_x_axis_type left_x_axis;

   typedef float _left_y_axis_type;
  _left_y_axis_type left_y_axis;

   typedef float _right_x_axis_type;
  _right_x_axis_type right_x_axis;

   typedef float _right_y_axis_type;
  _right_y_axis_type right_y_axis;





  typedef boost::shared_ptr< ::signal_chassis::controller_signal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::signal_chassis::controller_signal_<ContainerAllocator> const> ConstPtr;

}; // struct controller_signal_

typedef ::signal_chassis::controller_signal_<std::allocator<void> > controller_signal;

typedef boost::shared_ptr< ::signal_chassis::controller_signal > controller_signalPtr;
typedef boost::shared_ptr< ::signal_chassis::controller_signal const> controller_signalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::signal_chassis::controller_signal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::signal_chassis::controller_signal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::signal_chassis::controller_signal_<ContainerAllocator1> & lhs, const ::signal_chassis::controller_signal_<ContainerAllocator2> & rhs)
{
  return lhs.left_x_axis == rhs.left_x_axis &&
    lhs.left_y_axis == rhs.left_y_axis &&
    lhs.right_x_axis == rhs.right_x_axis &&
    lhs.right_y_axis == rhs.right_y_axis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::signal_chassis::controller_signal_<ContainerAllocator1> & lhs, const ::signal_chassis::controller_signal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace signal_chassis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::signal_chassis::controller_signal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::signal_chassis::controller_signal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_chassis::controller_signal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_chassis::controller_signal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_chassis::controller_signal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_chassis::controller_signal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::signal_chassis::controller_signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3ae204389da07ed6082cc8bc9e44110";
  }

  static const char* value(const ::signal_chassis::controller_signal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3ae204389da07edULL;
  static const uint64_t static_value2 = 0x6082cc8bc9e44110ULL;
};

template<class ContainerAllocator>
struct DataType< ::signal_chassis::controller_signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "signal_chassis/controller_signal";
  }

  static const char* value(const ::signal_chassis::controller_signal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::signal_chassis::controller_signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 left_x_axis\n"
"float32 left_y_axis\n"
"float32 right_x_axis\n"
"float32 right_y_axis\n"
;
  }

  static const char* value(const ::signal_chassis::controller_signal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::signal_chassis::controller_signal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_x_axis);
      stream.next(m.left_y_axis);
      stream.next(m.right_x_axis);
      stream.next(m.right_y_axis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controller_signal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::signal_chassis::controller_signal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::signal_chassis::controller_signal_<ContainerAllocator>& v)
  {
    s << indent << "left_x_axis: ";
    Printer<float>::stream(s, indent + "  ", v.left_x_axis);
    s << indent << "left_y_axis: ";
    Printer<float>::stream(s, indent + "  ", v.left_y_axis);
    s << indent << "right_x_axis: ";
    Printer<float>::stream(s, indent + "  ", v.right_x_axis);
    s << indent << "right_y_axis: ";
    Printer<float>::stream(s, indent + "  ", v.right_y_axis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIGNAL_CHASSIS_MESSAGE_CONTROLLER_SIGNAL_H

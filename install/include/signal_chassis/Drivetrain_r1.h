// Generated by gencpp from file signal_chassis/Drivetrain_r1.msg
// DO NOT EDIT!


#ifndef SIGNAL_CHASSIS_MESSAGE_DRIVETRAIN_R1_H
#define SIGNAL_CHASSIS_MESSAGE_DRIVETRAIN_R1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace signal_chassis
{
template <class ContainerAllocator>
struct Drivetrain_r1_
{
  typedef Drivetrain_r1_<ContainerAllocator> Type;

  Drivetrain_r1_()
    : steer_angle_front_left(0.0)
    , steer_angle_front_right(0.0)
    , steer_angle_rear(0.0)
    , drive_speed_front_left(0.0)
    , drive_speed_front_right(0.0)
    , drive_speed_rear(0.0)
    , drive_angular_speed_front_left(0.0)
    , drive_angular_speed_front_right(0.0)
    , drive_angular_speed_rear(0.0)  {
    }
  Drivetrain_r1_(const ContainerAllocator& _alloc)
    : steer_angle_front_left(0.0)
    , steer_angle_front_right(0.0)
    , steer_angle_rear(0.0)
    , drive_speed_front_left(0.0)
    , drive_speed_front_right(0.0)
    , drive_speed_rear(0.0)
    , drive_angular_speed_front_left(0.0)
    , drive_angular_speed_front_right(0.0)
    , drive_angular_speed_rear(0.0)  {
  (void)_alloc;
    }



   typedef float _steer_angle_front_left_type;
  _steer_angle_front_left_type steer_angle_front_left;

   typedef float _steer_angle_front_right_type;
  _steer_angle_front_right_type steer_angle_front_right;

   typedef float _steer_angle_rear_type;
  _steer_angle_rear_type steer_angle_rear;

   typedef float _drive_speed_front_left_type;
  _drive_speed_front_left_type drive_speed_front_left;

   typedef float _drive_speed_front_right_type;
  _drive_speed_front_right_type drive_speed_front_right;

   typedef float _drive_speed_rear_type;
  _drive_speed_rear_type drive_speed_rear;

   typedef float _drive_angular_speed_front_left_type;
  _drive_angular_speed_front_left_type drive_angular_speed_front_left;

   typedef float _drive_angular_speed_front_right_type;
  _drive_angular_speed_front_right_type drive_angular_speed_front_right;

   typedef float _drive_angular_speed_rear_type;
  _drive_angular_speed_rear_type drive_angular_speed_rear;





  typedef boost::shared_ptr< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> const> ConstPtr;

}; // struct Drivetrain_r1_

typedef ::signal_chassis::Drivetrain_r1_<std::allocator<void> > Drivetrain_r1;

typedef boost::shared_ptr< ::signal_chassis::Drivetrain_r1 > Drivetrain_r1Ptr;
typedef boost::shared_ptr< ::signal_chassis::Drivetrain_r1 const> Drivetrain_r1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::signal_chassis::Drivetrain_r1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::signal_chassis::Drivetrain_r1_<ContainerAllocator1> & lhs, const ::signal_chassis::Drivetrain_r1_<ContainerAllocator2> & rhs)
{
  return lhs.steer_angle_front_left == rhs.steer_angle_front_left &&
    lhs.steer_angle_front_right == rhs.steer_angle_front_right &&
    lhs.steer_angle_rear == rhs.steer_angle_rear &&
    lhs.drive_speed_front_left == rhs.drive_speed_front_left &&
    lhs.drive_speed_front_right == rhs.drive_speed_front_right &&
    lhs.drive_speed_rear == rhs.drive_speed_rear &&
    lhs.drive_angular_speed_front_left == rhs.drive_angular_speed_front_left &&
    lhs.drive_angular_speed_front_right == rhs.drive_angular_speed_front_right &&
    lhs.drive_angular_speed_rear == rhs.drive_angular_speed_rear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::signal_chassis::Drivetrain_r1_<ContainerAllocator1> & lhs, const ::signal_chassis::Drivetrain_r1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace signal_chassis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d64ee0e637d15c359801b97bc246779d";
  }

  static const char* value(const ::signal_chassis::Drivetrain_r1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd64ee0e637d15c35ULL;
  static const uint64_t static_value2 = 0x9801b97bc246779dULL;
};

template<class ContainerAllocator>
struct DataType< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "signal_chassis/Drivetrain_r1";
  }

  static const char* value(const ::signal_chassis::Drivetrain_r1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steer_angle_front_left\n"
"float32 steer_angle_front_right\n"
"float32 steer_angle_rear\n"
"float32 drive_speed_front_left\n"
"float32 drive_speed_front_right\n"
"float32 drive_speed_rear\n"
"float32 drive_angular_speed_front_left\n"
"float32 drive_angular_speed_front_right\n"
"float32 drive_angular_speed_rear\n"
;
  }

  static const char* value(const ::signal_chassis::Drivetrain_r1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steer_angle_front_left);
      stream.next(m.steer_angle_front_right);
      stream.next(m.steer_angle_rear);
      stream.next(m.drive_speed_front_left);
      stream.next(m.drive_speed_front_right);
      stream.next(m.drive_speed_rear);
      stream.next(m.drive_angular_speed_front_left);
      stream.next(m.drive_angular_speed_front_right);
      stream.next(m.drive_angular_speed_rear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Drivetrain_r1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::signal_chassis::Drivetrain_r1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::signal_chassis::Drivetrain_r1_<ContainerAllocator>& v)
  {
    s << indent << "steer_angle_front_left: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_front_left);
    s << indent << "steer_angle_front_right: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_front_right);
    s << indent << "steer_angle_rear: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle_rear);
    s << indent << "drive_speed_front_left: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed_front_left);
    s << indent << "drive_speed_front_right: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed_front_right);
    s << indent << "drive_speed_rear: ";
    Printer<float>::stream(s, indent + "  ", v.drive_speed_rear);
    s << indent << "drive_angular_speed_front_left: ";
    Printer<float>::stream(s, indent + "  ", v.drive_angular_speed_front_left);
    s << indent << "drive_angular_speed_front_right: ";
    Printer<float>::stream(s, indent + "  ", v.drive_angular_speed_front_right);
    s << indent << "drive_angular_speed_rear: ";
    Printer<float>::stream(s, indent + "  ", v.drive_angular_speed_rear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIGNAL_CHASSIS_MESSAGE_DRIVETRAIN_R1_H

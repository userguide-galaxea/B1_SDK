# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from signal_chassis/Drivetrain.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Drivetrain(genpy.Message):
  _md5sum = "46db51bd1f2094081def30cd2e74f33b"
  _type = "signal_chassis/Drivetrain"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 steer_angle_fl
float32 steer_angle_fr
float32 steer_angle_rl
float32 steer_angle_rr
float32 drive_speed_fl
float32 drive_speed_fr
float32 drive_speed_rl
float32 drive_speed_rr
float32 drive_angular_speed_fl
float32 drive_angular_speed_fr
float32 drive_angular_speed_rl
float32 drive_angular_speed_rr
int32 motion_mode"""
  __slots__ = ['steer_angle_fl','steer_angle_fr','steer_angle_rl','steer_angle_rr','drive_speed_fl','drive_speed_fr','drive_speed_rl','drive_speed_rr','drive_angular_speed_fl','drive_angular_speed_fr','drive_angular_speed_rl','drive_angular_speed_rr','motion_mode']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       steer_angle_fl,steer_angle_fr,steer_angle_rl,steer_angle_rr,drive_speed_fl,drive_speed_fr,drive_speed_rl,drive_speed_rr,drive_angular_speed_fl,drive_angular_speed_fr,drive_angular_speed_rl,drive_angular_speed_rr,motion_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Drivetrain, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.steer_angle_fl is None:
        self.steer_angle_fl = 0.
      if self.steer_angle_fr is None:
        self.steer_angle_fr = 0.
      if self.steer_angle_rl is None:
        self.steer_angle_rl = 0.
      if self.steer_angle_rr is None:
        self.steer_angle_rr = 0.
      if self.drive_speed_fl is None:
        self.drive_speed_fl = 0.
      if self.drive_speed_fr is None:
        self.drive_speed_fr = 0.
      if self.drive_speed_rl is None:
        self.drive_speed_rl = 0.
      if self.drive_speed_rr is None:
        self.drive_speed_rr = 0.
      if self.drive_angular_speed_fl is None:
        self.drive_angular_speed_fl = 0.
      if self.drive_angular_speed_fr is None:
        self.drive_angular_speed_fr = 0.
      if self.drive_angular_speed_rl is None:
        self.drive_angular_speed_rl = 0.
      if self.drive_angular_speed_rr is None:
        self.drive_angular_speed_rr = 0.
      if self.motion_mode is None:
        self.motion_mode = 0
    else:
      self.steer_angle_fl = 0.
      self.steer_angle_fr = 0.
      self.steer_angle_rl = 0.
      self.steer_angle_rr = 0.
      self.drive_speed_fl = 0.
      self.drive_speed_fr = 0.
      self.drive_speed_rl = 0.
      self.drive_speed_rr = 0.
      self.drive_angular_speed_fl = 0.
      self.drive_angular_speed_fr = 0.
      self.drive_angular_speed_rl = 0.
      self.drive_angular_speed_rr = 0.
      self.motion_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12fi().pack(_x.steer_angle_fl, _x.steer_angle_fr, _x.steer_angle_rl, _x.steer_angle_rr, _x.drive_speed_fl, _x.drive_speed_fr, _x.drive_speed_rl, _x.drive_speed_rr, _x.drive_angular_speed_fl, _x.drive_angular_speed_fr, _x.drive_angular_speed_rl, _x.drive_angular_speed_rr, _x.motion_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.steer_angle_fl, _x.steer_angle_fr, _x.steer_angle_rl, _x.steer_angle_rr, _x.drive_speed_fl, _x.drive_speed_fr, _x.drive_speed_rl, _x.drive_speed_rr, _x.drive_angular_speed_fl, _x.drive_angular_speed_fr, _x.drive_angular_speed_rl, _x.drive_angular_speed_rr, _x.motion_mode,) = _get_struct_12fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12fi().pack(_x.steer_angle_fl, _x.steer_angle_fr, _x.steer_angle_rl, _x.steer_angle_rr, _x.drive_speed_fl, _x.drive_speed_fr, _x.drive_speed_rl, _x.drive_speed_rr, _x.drive_angular_speed_fl, _x.drive_angular_speed_fr, _x.drive_angular_speed_rl, _x.drive_angular_speed_rr, _x.motion_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.steer_angle_fl, _x.steer_angle_fr, _x.steer_angle_rl, _x.steer_angle_rr, _x.drive_speed_fl, _x.drive_speed_fr, _x.drive_speed_rl, _x.drive_speed_rr, _x.drive_angular_speed_fl, _x.drive_angular_speed_fr, _x.drive_angular_speed_rl, _x.drive_angular_speed_rr, _x.motion_mode,) = _get_struct_12fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12fi = None
def _get_struct_12fi():
    global _struct_12fi
    if _struct_12fi is None:
        _struct_12fi = struct.Struct("<12fi")
    return _struct_12fi
